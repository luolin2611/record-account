package ${package}.${moduleName}.controller;
##        ${tableName} 表名
##        ${package} 包名
##        ${moduleName} 模块名
##        ${className} 驼峰表名1
##        ${classname} 驼峰表名2
##        ${pathName} 正常表名
##        ${comments} 表中文名
##        ${author} 作者
##        ${datetime} 时间

import java.util.*;
import java.util.stream.Collectors;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.jeecg.common.api.vo.Result;
import org.jeecg.common.system.query.QueryGenerator;
import org.jeecg.common.aspect.annotation.AutoLog;
import org.jeecg.common.util.oConvertUtils;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.${className}Service;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;

#if(${isExcel})
import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.def.NormalExcelConstants;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.view.JeecgEntityExcelView;
#end


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import com.alibaba.fastjson.JSON;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * @Description: ${comments}
 * @Author: ${author}
 * @Date:   ${datetime}
 */
@Slf4j
@Api(tags = "${comments}")
@RestController
@RequestMapping("/${moduleName}/${classname}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * ${comments}分页列表查询
     * @param ${classname}
     * @param pageNo
     * @param pageSize
     * @param req
     * @return
     */
    @AutoLog(value = "${comments}-分页列表查询")
    @ApiOperation(value = "${comments}-分页列表查询", notes = "${comments}-分页列表查询")
    @GetMapping(value = "/list")
    public Result<?> queryPageList(${className} ${classname},
            @RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
            @RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
            HttpServletRequest req) {
        QueryWrapper<${className}> queryWrapper = QueryGenerator.initQueryWrapper(${classname}, req.getParameterMap());

        IPage<${className}> pageList = ${classname}Service.page(new Page(pageNo, pageSize), queryWrapper);

        return Result.ok(pageList);
    }

    /**
     * ${comments}通过id查询
     * @param id
     * @return
     */
    @AutoLog(value = "${comments}-通过id查询")
    @ApiOperation(value = "${comments}-通过id查询", notes = "${comments}-通过id查询")
    @GetMapping(value = "/queryById")
    public Result<?> queryById(@RequestParam(name = "id", required = true) String id) {
        ${className} ${classname} = ${classname}Service.getById(id);

        if (${classname}==null)
        return Result.error("未找到对应实体!");

        return Result.ok(${classname});
    }

#if(!${isView})
    /**
     *   ${comments}添加
     * @param ${classname}
     * @return
     */
    @AutoLog(value = "${comments}-添加")
    @ApiOperation(value = "${comments}-添加", notes = "${comments}-添加")
    @PostMapping(value = "/add")
    public Result<?> add(@RequestBody ${className} ${classname}) {
        if(!${classname}Service.save(${classname}))
            return Result.error("操作失败");

        return Result.ok(${classname});
    }

    /**
     *   ${comments}批量添加
     * @param ${classname}s
     * @return
     */
    @AutoLog(value = "${comments}-批量添加")
    @ApiOperation(value="${comments}-批量添加", notes="${comments}-批量添加")
    @PostMapping(value = "/addBatch")
    public Result<?> addBatch(@RequestBody Collection<${className}> ${classname}s) {
        if(!${classname}Service.saveBatch(${classname}s))
            return Result.error("操作失败");

        return Result.ok(${classname}s);
    }

    /**
     *  ${comments}编辑
     * @param ${classname}
     * @return
     */
    @AutoLog(value = "${comments}-编辑")
    @ApiOperation(value = "${comments}-编辑", notes = "${comments}-编辑")
    @PutMapping(value = "/edit")
    public Result<?> edit(@RequestBody ${className} ${classname}) {
        if(!${classname}Service.updateById(${classname}))
            return Result.error("操作失败");

        return Result.ok(${classname});
    }

    /**
     *  ${comments}批量编辑
     * @param ${classname}s
     * @return
     */
    @AutoLog(value = "${comments}-批量编辑")
    @ApiOperation(value="${comments}-批量编辑", notes="${comments}-批量编辑")
    @PutMapping(value = "/editBatch")
    public Result<?> editBatch(@RequestBody Collection<${className}> ${classname}s) {
        if(!${classname}Service.updateBatchById(${classname}s))
            return Result.error("操作失败");

        return Result.ok(${classname}s);
    }

    /**
     *   ${comments}通过id删除
     * @param id
     * @return
     */
    @AutoLog(value = "${comments}-通过id删除")
    @ApiOperation(value = "${comments}-通过id删除", notes = "${comments}-通过id删除")
    @DeleteMapping(value = "/delete")
    public Result<?> delete(@RequestParam(name = "id", required = true) String id) {
        if(!${classname}Service.removeById(id))
            return Result.error("删除失败!");

        return Result.ok("删除成功!");
    }

    /**
     *  ${comments}批量删除
     * @param ids
     * @return
     */
    @AutoLog(value = "${comments}-批量删除")
    @ApiOperation(value = "${comments}-批量删除", notes = "${comments}-批量删除")
    @DeleteMapping(value = "/deleteBatch")
    public Result<?> deleteBatch(@RequestParam(name = "ids", required = true) String ids) {
        if(!${classname}Service.removeByIds(Arrays.asList(ids.split(","))))
            return Result.error("删除失败!");

        return Result.ok("删除成功!");
    }
#end

#if(${isExcel})
    /**
    * 下载模板
    *
    * @param request
    * @param response
    */
    @RequestMapping(value = "/downExcelTemplate")
    public ModelAndView downExcelTemplate(HttpServletRequest request, HttpServletResponse response) {
        //AutoPoi 导出Excel
        ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
        //导出文件名称
        mv.addObject(NormalExcelConstants.FILE_NAME, "${classname}列表");
        mv.addObject(NormalExcelConstants.CLASS, ${className}.class);
        mv.addObject(NormalExcelConstants.PARAMS, new ExportParams("${classname}列表数据", "导出人:Jeecg", "导出信息"));
        mv.addObject(NormalExcelConstants.DATA_LIST, new ArrayList<${className}>());
        return mv;
    }
    /**
    * 导出excel
    *
    * @param ${classname}
    * @param request
    * @param response
    */
    @RequestMapping(value = "/exportExcel")
    public ModelAndView exportExcel(${className} ${classname}, HttpServletRequest request, HttpServletResponse response) {
        // Step.1 组装查询条件
        QueryWrapper<${className}> queryWrapper = QueryGenerator.initQueryWrapper(${classname}, request.getParameterMap());

        //Step.2 AutoPoi 导出Excel
        ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
        List<${className}> list = ${classname}Service.list(queryWrapper);
        //导出文件名称
        mv.addObject(NormalExcelConstants.FILE_NAME, "${classname}列表");
        mv.addObject(NormalExcelConstants.CLASS, ${className}.class);
        mv.addObject(NormalExcelConstants.PARAMS, new ExportParams("${classname}列表数据", "导出人:Jeecg", "导出信息"));
        mv.addObject(NormalExcelConstants.DATA_LIST, list);
        return mv;
    }

    /**
    * 通过excel导入数据
    *
    * @param request
    * @param response
    * @return
    */
    @RequestMapping(value = "/importExcel", method = RequestMethod.POST)
    public Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
        for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
            MultipartFile file = entity.getValue();// 获取上传文件对象
            ImportParams params = new ImportParams();
            params.setTitleRows(2);
            params.setHeadRows(1);
            params.setNeedSave(true);
            try {
                List<${className}> list${className}s = ExcelImportUtil.importExcel(file.getInputStream(), ${className}.class, params);
                ${classname}Service.saveBatch(list${className}s);
                return Result.ok("文件导入成功！数据行数:" + list${className}s.size());
            } catch (Exception e) {
                log.error(e.getMessage(),e);
                return Result.error("文件导入失败:"+e.getMessage());
            } finally {
                try {
                    file.getInputStream().close();
                } catch (IOException e) {
                    log.error(e.getMessage());
                }
            }
        }
        return Result.ok("文件导入失败！");
    }
#end
}
